name: CI/CD Pipeline

on:
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Show current directory
        run: pwd # Print the current working directory to ensure we're in the right place

      - name: List files after checkout
        run: ls -R # List files in the directory after checking out the code

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push web Docker image
        run: |
          IMAGE_NAME=1238456anrd/web
          IMAGE_TAG=${{ github.sha }}
          docker build -t $IMAGE_NAME:$IMAGE_TAG -f ApiTemplate.Presentation.Web/Dockerfile .
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your region

      - name: Register new ECS task definition
        id: task-def
        run: |
          TASK_DEFINITION=$(cat <<EOF
          {
            "family": "my-app-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "web",
                "image": "1238456anrd/web:${{ github.sha }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "protocol": "tcp"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "1024",
            "memory": "2048",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole"
          }
          EOF
          )

          echo "$TASK_DEFINITION" > task-def.json
          aws ecs register-task-definition --cli-input-json file://task-def.json

      - name: Update ECS service
        run: |
          CLUSTER_NAME=ApiTemplateCluster
          SERVICE_NAME=ApiTemplateService
          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition my-app-task | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEFINITION_ARN --force-new-deployment
